// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Aficionado
import Combine
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AficionadoError : Swift.Error {
  case requestTimeout
  case internalServerError
  case notImplemented
  case serviceUnavailable
  case imageNotAvailable
  case invalidURL(Swift.String)
}
public protocol NetworkManaging {
  #if compiler(>=5.3) && $AsyncAwait
  func fetchArtworkPayload() async throws -> Foundation.Data
  #endif
  func fetchArtworkPayload(_ completion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  init(configuration: any Aficionado.NetworkConfigurable)
}
final public class NetworkManager : Aficionado.NetworkManaging {
  final public var configuration: any Aficionado.NetworkConfigurable {
    get
  }
  required public init(configuration: any Aficionado.NetworkConfigurable)
  #if compiler(>=5.3) && $AsyncAwait
  final public func fetchArtworkPayload() async throws -> Foundation.Data
  #endif
  @available(*, deprecated, renamed: "fetchArtworkPayload()", message: "This will be removed! Use the async throws variant of this function")
  final public func fetchArtworkPayload(_ completion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum Stability {
  case ideal
  case excellent
  case good
  case unstable
  case broken
  public static func == (a: Aficionado.Stability, b: Aficionado.Stability) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ViewCountManaging {
  init()
  func viewCountStream(for itemID: Swift.String) throws -> Combine.AnyPublisher<Swift.Int, Swift.Never>
  #if compiler(>=5.3) && $AsyncAwait
  func latestViewCount(for itemID: Swift.String) async throws -> Swift.Int
  #endif
}
@_hasMissingDesignatedInitializers final public class ViewCountManager : Aficionado.ViewCountManaging {
  public init()
  final public func viewCountStream(for itemID: Swift.String) throws -> Combine.AnyPublisher<Swift.Int, Swift.Never>
  #if compiler(>=5.3) && $AsyncAwait
  final public func latestViewCount(for itemID: Swift.String) async throws -> Swift.Int
  #endif
  @objc deinit
}
public protocol NetworkConfigurable {
  var stability: Aficionado.Stability { get }
}
public struct NetworkConfiguration : Aficionado.NetworkConfigurable {
  public let stability: Aficionado.Stability
  public init(stability: Aficionado.Stability = .excellent)
}
public protocol ArtworkProviding {
  #if compiler(>=5.3) && $AsyncAwait
  func fetchImage(url: Foundation.URL) async throws -> Foundation.Data
  #endif
}
@_hasMissingDesignatedInitializers final public class ArtworkProvider : Aficionado.ArtworkProviding {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  final public func fetchImage(url: Foundation.URL) async throws -> Foundation.Data
  #endif
  @objc deinit
}
extension Aficionado.Stability : Swift.Equatable {}
extension Aficionado.Stability : Swift.Hashable {}
